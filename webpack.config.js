
const path = require('path')
const webpack = require('webpack')
const HtmlWebpackPlugin = require('html-webpack-plugin')
const CircularDependencyPlugin = require('circular-dependency-plugin')
const CopyWebpackPlugin = require('copy-webpack-plugin')

const NODE_ENV = process.env.NODE_ENV || 'development'

const inProject = path.resolve.bind(path, __dirname)

const __DEV__ = NODE_ENV === 'development'
const __TEST__ = NODE_ENV === 'test'
const __PROD__ = NODE_ENV === 'production'

const config = {
  mode: NODE_ENV,
  entry: {
    main: path.join(process.cwd(), 'src/index.js'),
  },
  output: {
    path: inProject('dist'),
    filename: '[name].[hash].js',
    chunkFilename: '[name].[hash].js',
    publicPath: '/',
  },
  module: {
    rules: [
      {
        test: /\.js$/, // Transform all .js files required somewhere with Babel
        exclude: /node_modules/,
        use: {
          loader: 'babel-loader',
        },
      },
      {
        // Preprocess our own .scss files
        test: /\.(sass|scss)$/,
        use: [{
          loader: 'style-loader', // creates style nodes from JS strings
          options: {
            sourceMap: true,
          }
        }, {
          loader: 'css-loader', // translates CSS into CommonJS
          options: {
            modules: true,
            localIdentName: '[name]__[local]---[hash:base64:5]',
            sourceMap: true,
            minimize: true
          }
        }, {
          loader: 'postcss-loader',
          options: {
            sourceMap: true,
          },
        }, {
          loader: 'sass-loader', // compiles Sass to CSS
          options: {
            sourceMap: true,
          }
        }]
      }, {
        // Preprocess 3rd party .css files located in node_modules
        test: /\.css$/,
        include: /node_modules/,
        use: [{
          loader: 'style-loader', // creates style nodes from JS strings
          options: {
            sourceMap: true,
          }
        }, {
          loader: 'css-loader', // translates CSS into CommonJS
          options: {
            localIdentName: '[name]__[local]---[hash:base64:5]',
            sourceMap: true,
            minimize: true
          }
        }, {
          loader: 'postcss-loader',
          options: {
            sourceMap: true,
          },
        }],
      }, {
        test: /\.svg$/,
        exclude: /node_modules/,
        loader: 'svg-react-loader',
        query: {
          classIdPrefix: '[name]-[hash:8]__',
          propsMap: {
            fillRule: 'fill-rule',
            foo: 'bar'
          },
          xmlnsTest: /^xmlns.*$/
        }
      }, {
        test: /\.(eot|otf|ttf|woff|woff2)$/,
        use: 'file-loader',
      }, {
        test: /\.(jpg|png|gif)$/,
        use: [
          'file-loader',
          {
            loader: 'image-webpack-loader',
            options: {
              query: {
                gifsicle: {
                  interlaced: true
                },
                mozjpeg: {
                  progressive: true
                },
                optipng: {
                  optimizationLevel: 7
                },
                pngquant: {
                  quality: '65-90',
                  speed: 4
                }
              }
            },
          },
        ],
      },
      {
        test: /\.html$/,
        use: 'html-loader'
      },
      {
        test: /\.json$/,
        use: 'json-loader'
      },
      {
        test: /\.(mp4|webm)$/,
        use: {
          loader: 'url-loader',
          options: {
            limit: 10000
          },
        },
      },
    ],
  },
  plugins: [
    new HtmlWebpackPlugin({
      inject: true, // Inject all files that are generated by webpack, e.g. bundle.js
      template: 'src/index.html'
    }),
    new CircularDependencyPlugin({
      exclude: /a\.js|node_modules/, // exclude node_modules
      failOnError: true // show a warning when there is a circular dependency
    }),
    // Always expose NODE_ENV to webpack, in order to use `process.env.NODE_ENV`
    // inside your code for any environment checks; UglifyJS will automatically
    // drop any unreachable code.
    new webpack.DefinePlugin({
      'process.env': {NODE_ENV: JSON.stringify(NODE_ENV)},
      __DEV__,
      __TEST__,
      __PROD__,
    }),
    new webpack.ContextReplacementPlugin(/\.\/locale$/, 'empty-module', false, /js$/),
    new webpack.HotModuleReplacementPlugin({
      multiStep: false
    }),
    new CopyWebpackPlugin([{
      from: 'public',
      to: ''
    }])
  ],
  resolve: {
    modules: ['src', 'server', 'node_modules'],
    extensions: [
      '.js',
      '.jsx',
      '.scss',
      '.react.js'
    ],
    mainFields: [
      'browser',
      'jsnext:main',
      'main'
    ]
  },
  devtool: 'source-map',
  target: 'web', // Make web variables accessible to webpack, e.g. window
  performance: {
    hints: 'warning',
  },
  optimization: {
    namedModules: true,
    splitChunks: {
      cacheGroups: {
        react: {
          chunks: 'initial',
          name: 'react',
          test: 'react',
          enforce: true
        },
        apollo: {
          chunks: 'initial',
          name: 'apollo',
          test: 'apollo',
          enforce: true
        },
        vendor: {
          chunks: 'initial',
          name: 'vendor',
          test: 'vendor',
          enforce: true
        },
        styles: {
          chunks: 'initial',
          name: 'styles',
          test: 'styles',
          enforce: true
        },
      }
    },
    runtimeChunk: true,
  },
  devServer: {
    historyApiFallback: true,
    hot: true,
    inline: true,
    host: 'localhost', // Defaults to `localhost`
    port: 3000,
    proxy: {
      '/graphql': 'http://localhost:8000'
    }
  },
}

module.exports = config
